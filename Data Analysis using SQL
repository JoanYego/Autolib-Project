{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Moringa_Data_Science_Prep_W4_Independent_Project_2020_07_Joan_Yego_Python/SQL_Notebook",
      "provenance": [],
      "collapsed_sections": [],
      "toc_visible": true,
      "authorship_tag": "ABX9TyPUa3K6CGB9CTehAiRAjLXv",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/JoanYego/Autolib-Project/blob/master/Moringa_Data_Science_Prep_W4_Independent_Project_2020_07_Joan_Yego_Python_SQL_Notebook.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "m4Nf9TC1Sb3P",
        "colab_type": "text"
      },
      "source": [
        "# Importing Our Libraries"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dT9U6FAJSjgd",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Importing the pandas library\n",
        "# \n",
        "import pandas as pd\n",
        "\n",
        "# Importing the numpy library\n",
        "#\n",
        "import numpy as np"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "t5lyjaQ5S_sr",
        "colab_type": "text"
      },
      "source": [
        "# Reading the Dataset from csv file"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0qShU_q8TE5S",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 445
        },
        "outputId": "e8ba190d-6f00-4987-fcec-1b15e211c665"
      },
      "source": [
        "url = 'http://bit.ly/autolib_dataset'\n",
        "df = pd.read_csv(url)\n",
        "df.head(5)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Address</th>\n",
              "      <th>Cars</th>\n",
              "      <th>Bluecar counter</th>\n",
              "      <th>Utilib counter</th>\n",
              "      <th>Utilib 1.4 counter</th>\n",
              "      <th>Charge Slots</th>\n",
              "      <th>Charging Status</th>\n",
              "      <th>City</th>\n",
              "      <th>Displayed comment</th>\n",
              "      <th>ID</th>\n",
              "      <th>Kind</th>\n",
              "      <th>Geo point</th>\n",
              "      <th>Postal code</th>\n",
              "      <th>Public name</th>\n",
              "      <th>Rental status</th>\n",
              "      <th>Scheduled at</th>\n",
              "      <th>Slots</th>\n",
              "      <th>Station type</th>\n",
              "      <th>Status</th>\n",
              "      <th>Subscription status</th>\n",
              "      <th>year</th>\n",
              "      <th>month</th>\n",
              "      <th>day</th>\n",
              "      <th>hour</th>\n",
              "      <th>minute</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2 Avenue de Suffren</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>nonexistent</td>\n",
              "      <td>Paris</td>\n",
              "      <td>NaN</td>\n",
              "      <td>paris-suffren-2</td>\n",
              "      <td>STATION</td>\n",
              "      <td>48.857, 2.2917</td>\n",
              "      <td>75015</td>\n",
              "      <td>Paris/Suffren/2</td>\n",
              "      <td>operational</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2</td>\n",
              "      <td>station</td>\n",
              "      <td>ok</td>\n",
              "      <td>nonexistent</td>\n",
              "      <td>2018</td>\n",
              "      <td>4</td>\n",
              "      <td>8</td>\n",
              "      <td>11</td>\n",
              "      <td>43</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>145 Rue Raymond Losserand</td>\n",
              "      <td>6</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>operational</td>\n",
              "      <td>Paris</td>\n",
              "      <td>NaN</td>\n",
              "      <td>paris-raymondlosserand-145</td>\n",
              "      <td>STATION</td>\n",
              "      <td>48.83126, 2.313088</td>\n",
              "      <td>75014</td>\n",
              "      <td>Paris/Raymond Losserand/145</td>\n",
              "      <td>operational</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>station</td>\n",
              "      <td>ok</td>\n",
              "      <td>nonexistent</td>\n",
              "      <td>2018</td>\n",
              "      <td>4</td>\n",
              "      <td>6</td>\n",
              "      <td>7</td>\n",
              "      <td>24</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2 Avenue John Fitzgerald Kennedy</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>operational</td>\n",
              "      <td>Le Bourget</td>\n",
              "      <td>NaN</td>\n",
              "      <td>lebourget-johnfitzgeraldkennedy-2</td>\n",
              "      <td>STATION</td>\n",
              "      <td>48.938103, 2.4286035</td>\n",
              "      <td>93350</td>\n",
              "      <td>Le Bourget/John Fitzgerald Kennedy/2</td>\n",
              "      <td>operational</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>station</td>\n",
              "      <td>ok</td>\n",
              "      <td>nonexistent</td>\n",
              "      <td>2018</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>20</td>\n",
              "      <td>14</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>51 Rue EugÃ¨ne OudinÃ©</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>operational</td>\n",
              "      <td>Paris</td>\n",
              "      <td>NaN</td>\n",
              "      <td>paris-eugeneoudine-51</td>\n",
              "      <td>STATION</td>\n",
              "      <td>48.8250327, 2.3725162</td>\n",
              "      <td>75013</td>\n",
              "      <td>Paris/EugÃ¨ne OudinÃ©/51</td>\n",
              "      <td>operational</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2</td>\n",
              "      <td>station</td>\n",
              "      <td>ok</td>\n",
              "      <td>nonexistent</td>\n",
              "      <td>2018</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>37</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>6 avenue de la Porte de Champerret</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>nonexistent</td>\n",
              "      <td>Paris</td>\n",
              "      <td>NaN</td>\n",
              "      <td>paris-portedechamperret-6</td>\n",
              "      <td>PARKING</td>\n",
              "      <td>48.8862632, 2.2874511</td>\n",
              "      <td>75017</td>\n",
              "      <td>Paris/Porte de Champerret/6</td>\n",
              "      <td>operational</td>\n",
              "      <td>NaN</td>\n",
              "      <td>3</td>\n",
              "      <td>station</td>\n",
              "      <td>ok</td>\n",
              "      <td>nonexistent</td>\n",
              "      <td>2018</td>\n",
              "      <td>4</td>\n",
              "      <td>8</td>\n",
              "      <td>17</td>\n",
              "      <td>23</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                              Address  Cars  Bluecar counter  ...  day  hour  minute\n",
              "0                 2 Avenue de Suffren     0                0  ...    8    11      43\n",
              "1           145 Rue Raymond Losserand     6                6  ...    6     7      24\n",
              "2    2 Avenue John Fitzgerald Kennedy     3                3  ...    3    20      14\n",
              "3              51 Rue EugÃ¨ne OudinÃ©     3                3  ...    4     4      37\n",
              "4  6 avenue de la Porte de Champerret     3                3  ...    8    17      23\n",
              "\n",
              "[5 rows x 25 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 74
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gmmy69K7UI6Q",
        "colab_type": "text"
      },
      "source": [
        "# Previewing the Dataset and Its Characteristics"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Rw7A8tjkUR6T",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 578
        },
        "outputId": "c625093a-10b3-488a-9ecb-6130a771b56e"
      },
      "source": [
        "# Understanding more about the dataset by accessing its information\n",
        "#\n",
        "df.info()\n",
        "df.shape\n",
        "#df.head(5)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 5000 entries, 0 to 4999\n",
            "Data columns (total 25 columns):\n",
            " #   Column               Non-Null Count  Dtype \n",
            "---  ------               --------------  ----- \n",
            " 0   Address              5000 non-null   object\n",
            " 1   Cars                 5000 non-null   int64 \n",
            " 2   Bluecar counter      5000 non-null   int64 \n",
            " 3   Utilib counter       5000 non-null   int64 \n",
            " 4   Utilib 1.4 counter   5000 non-null   int64 \n",
            " 5   Charge Slots         5000 non-null   int64 \n",
            " 6   Charging Status      5000 non-null   object\n",
            " 7   City                 5000 non-null   object\n",
            " 8   Displayed comment    111 non-null    object\n",
            " 9   ID                   5000 non-null   object\n",
            " 10  Kind                 5000 non-null   object\n",
            " 11  Geo point            5000 non-null   object\n",
            " 12  Postal code          5000 non-null   int64 \n",
            " 13  Public name          5000 non-null   object\n",
            " 14  Rental status        5000 non-null   object\n",
            " 15  Scheduled at         47 non-null     object\n",
            " 16  Slots                5000 non-null   int64 \n",
            " 17  Station type         5000 non-null   object\n",
            " 18  Status               5000 non-null   object\n",
            " 19  Subscription status  5000 non-null   object\n",
            " 20  year                 5000 non-null   int64 \n",
            " 21  month                5000 non-null   int64 \n",
            " 22  day                  5000 non-null   int64 \n",
            " 23  hour                 5000 non-null   int64 \n",
            " 24  minute               5000 non-null   int64 \n",
            "dtypes: int64(12), object(13)\n",
            "memory usage: 976.7+ KB\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(5000, 25)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 75
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UQ9OSyGZU3fW",
        "colab_type": "text"
      },
      "source": [
        "# Data Cleaning"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uo_BLNFCU5eg",
        "colab_type": "text"
      },
      "source": [
        "## 1) Checking the Validity of Dataset"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xBVAb9rHU_yX",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 329
        },
        "outputId": "50042913-b0b2-4683-887d-2dfab046f68c"
      },
      "source": [
        "# Checking for and dropping irrelevant columns\n",
        "# We can drop the five columns below since they are \n",
        "# not relevant in regards to answering the research questions\n",
        "\n",
        "# There are no syntax errors/typos in the rows/records of the dataset\n",
        "\n",
        "df1 = df.drop(columns=['Address', 'Subscription status', 'Displayed comment', 'Geo point',\n",
        "                       'Scheduled at'])\n",
        "df1.shape\n",
        "df1.head(4)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Cars</th>\n",
              "      <th>Bluecar counter</th>\n",
              "      <th>Utilib counter</th>\n",
              "      <th>Utilib 1.4 counter</th>\n",
              "      <th>Charge Slots</th>\n",
              "      <th>Charging Status</th>\n",
              "      <th>City</th>\n",
              "      <th>ID</th>\n",
              "      <th>Kind</th>\n",
              "      <th>Postal code</th>\n",
              "      <th>Public name</th>\n",
              "      <th>Rental status</th>\n",
              "      <th>Slots</th>\n",
              "      <th>Station type</th>\n",
              "      <th>Status</th>\n",
              "      <th>year</th>\n",
              "      <th>month</th>\n",
              "      <th>day</th>\n",
              "      <th>hour</th>\n",
              "      <th>minute</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>nonexistent</td>\n",
              "      <td>Paris</td>\n",
              "      <td>paris-suffren-2</td>\n",
              "      <td>STATION</td>\n",
              "      <td>75015</td>\n",
              "      <td>Paris/Suffren/2</td>\n",
              "      <td>operational</td>\n",
              "      <td>2</td>\n",
              "      <td>station</td>\n",
              "      <td>ok</td>\n",
              "      <td>2018</td>\n",
              "      <td>4</td>\n",
              "      <td>8</td>\n",
              "      <td>11</td>\n",
              "      <td>43</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>6</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>operational</td>\n",
              "      <td>Paris</td>\n",
              "      <td>paris-raymondlosserand-145</td>\n",
              "      <td>STATION</td>\n",
              "      <td>75014</td>\n",
              "      <td>Paris/Raymond Losserand/145</td>\n",
              "      <td>operational</td>\n",
              "      <td>0</td>\n",
              "      <td>station</td>\n",
              "      <td>ok</td>\n",
              "      <td>2018</td>\n",
              "      <td>4</td>\n",
              "      <td>6</td>\n",
              "      <td>7</td>\n",
              "      <td>24</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>operational</td>\n",
              "      <td>Le Bourget</td>\n",
              "      <td>lebourget-johnfitzgeraldkennedy-2</td>\n",
              "      <td>STATION</td>\n",
              "      <td>93350</td>\n",
              "      <td>Le Bourget/John Fitzgerald Kennedy/2</td>\n",
              "      <td>operational</td>\n",
              "      <td>1</td>\n",
              "      <td>station</td>\n",
              "      <td>ok</td>\n",
              "      <td>2018</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>20</td>\n",
              "      <td>14</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>operational</td>\n",
              "      <td>Paris</td>\n",
              "      <td>paris-eugeneoudine-51</td>\n",
              "      <td>STATION</td>\n",
              "      <td>75013</td>\n",
              "      <td>Paris/EugÃ¨ne OudinÃ©/51</td>\n",
              "      <td>operational</td>\n",
              "      <td>2</td>\n",
              "      <td>station</td>\n",
              "      <td>ok</td>\n",
              "      <td>2018</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>37</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   Cars  Bluecar counter  Utilib counter  ...  day  hour minute\n",
              "0     0                0               0  ...    8    11     43\n",
              "1     6                6               0  ...    6     7     24\n",
              "2     3                3               0  ...    3    20     14\n",
              "3     3                3               1  ...    4     4     37\n",
              "\n",
              "[4 rows x 20 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 76
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VmMNaE9LYp0J",
        "colab_type": "text"
      },
      "source": [
        "## 2) Checking the Uniformity within Dataset"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "E_OtsHAFZSsd",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 380
        },
        "outputId": "5924cd69-d7aa-4f4e-d0dd-dc6bd29966df"
      },
      "source": [
        "# Renaming columns for standardization\n",
        "\n",
        "df1.rename(str.lower, axis='columns', inplace=True)\n",
        "df1.head(4)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>cars</th>\n",
              "      <th>bluecar counter</th>\n",
              "      <th>utilib counter</th>\n",
              "      <th>utilib 1.4 counter</th>\n",
              "      <th>charge slots</th>\n",
              "      <th>charging status</th>\n",
              "      <th>city</th>\n",
              "      <th>id</th>\n",
              "      <th>kind</th>\n",
              "      <th>postal code</th>\n",
              "      <th>public name</th>\n",
              "      <th>rental status</th>\n",
              "      <th>slots</th>\n",
              "      <th>station type</th>\n",
              "      <th>status</th>\n",
              "      <th>year</th>\n",
              "      <th>month</th>\n",
              "      <th>day</th>\n",
              "      <th>hour</th>\n",
              "      <th>minute</th>\n",
              "      <th>time</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>nonexistent</td>\n",
              "      <td>Paris</td>\n",
              "      <td>paris-suffren-2</td>\n",
              "      <td>STATION</td>\n",
              "      <td>75015</td>\n",
              "      <td>Paris/Suffren/2</td>\n",
              "      <td>operational</td>\n",
              "      <td>2</td>\n",
              "      <td>station</td>\n",
              "      <td>ok</td>\n",
              "      <td>2018</td>\n",
              "      <td>4</td>\n",
              "      <td>8</td>\n",
              "      <td>11</td>\n",
              "      <td>43</td>\n",
              "      <td>2018-04-08 11:43:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>6</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>operational</td>\n",
              "      <td>Paris</td>\n",
              "      <td>paris-raymondlosserand-145</td>\n",
              "      <td>STATION</td>\n",
              "      <td>75014</td>\n",
              "      <td>Paris/Raymond Losserand/145</td>\n",
              "      <td>operational</td>\n",
              "      <td>0</td>\n",
              "      <td>station</td>\n",
              "      <td>ok</td>\n",
              "      <td>2018</td>\n",
              "      <td>4</td>\n",
              "      <td>6</td>\n",
              "      <td>7</td>\n",
              "      <td>24</td>\n",
              "      <td>2018-04-06 07:24:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>operational</td>\n",
              "      <td>Le Bourget</td>\n",
              "      <td>lebourget-johnfitzgeraldkennedy-2</td>\n",
              "      <td>STATION</td>\n",
              "      <td>93350</td>\n",
              "      <td>Le Bourget/John Fitzgerald Kennedy/2</td>\n",
              "      <td>operational</td>\n",
              "      <td>1</td>\n",
              "      <td>station</td>\n",
              "      <td>ok</td>\n",
              "      <td>2018</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>20</td>\n",
              "      <td>14</td>\n",
              "      <td>2018-04-03 20:14:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>operational</td>\n",
              "      <td>Paris</td>\n",
              "      <td>paris-eugeneoudine-51</td>\n",
              "      <td>STATION</td>\n",
              "      <td>75013</td>\n",
              "      <td>Paris/EugÃ¨ne OudinÃ©/51</td>\n",
              "      <td>operational</td>\n",
              "      <td>2</td>\n",
              "      <td>station</td>\n",
              "      <td>ok</td>\n",
              "      <td>2018</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>37</td>\n",
              "      <td>2018-04-04 04:37:00</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   cars  bluecar counter  utilib counter  ...  hour  minute                time\n",
              "0     0                0               0  ...    11      43 2018-04-08 11:43:00\n",
              "1     6                6               0  ...     7      24 2018-04-06 07:24:00\n",
              "2     3                3               0  ...    20      14 2018-04-03 20:14:00\n",
              "3     3                3               1  ...     4      37 2018-04-04 04:37:00\n",
              "\n",
              "[4 rows x 21 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 94
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "x_sK03agdZq1",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 921
        },
        "outputId": "a0d1401f-f9e9-4655-c9fc-7400d8a7825c"
      },
      "source": [
        "# Data type conversion\n",
        "\n",
        "# We can combine the year, month, day, hour and minute columns\n",
        "# into one time column with a datetime type\n",
        "\n",
        "df1['time'] = pd.to_datetime(df1[['year', 'month', 'day', 'hour', 'minute']].rename(\n",
        "                columns={'year': 'year', 'month': 'month', 'day': 'day',\n",
        "                         'hour': 'hour', 'minute': 'minute'}))\n",
        "df1.info()\n",
        "df1.head(5)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 5000 entries, 0 to 4999\n",
            "Data columns (total 21 columns):\n",
            " #   Column              Non-Null Count  Dtype         \n",
            "---  ------              --------------  -----         \n",
            " 0   cars                5000 non-null   int64         \n",
            " 1   bluecar counter     5000 non-null   int64         \n",
            " 2   utilib counter      5000 non-null   int64         \n",
            " 3   utilib 1.4 counter  5000 non-null   int64         \n",
            " 4   charge slots        5000 non-null   int64         \n",
            " 5   charging status     5000 non-null   object        \n",
            " 6   city                5000 non-null   object        \n",
            " 7   id                  5000 non-null   object        \n",
            " 8   kind                5000 non-null   object        \n",
            " 9   postal code         5000 non-null   int64         \n",
            " 10  public name         5000 non-null   object        \n",
            " 11  rental status       5000 non-null   object        \n",
            " 12  slots               5000 non-null   int64         \n",
            " 13  station type        5000 non-null   object        \n",
            " 14  status              5000 non-null   object        \n",
            " 15  year                5000 non-null   int64         \n",
            " 16  month               5000 non-null   int64         \n",
            " 17  day                 5000 non-null   int64         \n",
            " 18  hour                5000 non-null   int64         \n",
            " 19  minute              5000 non-null   int64         \n",
            " 20  time                5000 non-null   datetime64[ns]\n",
            "dtypes: datetime64[ns](1), int64(12), object(8)\n",
            "memory usage: 820.4+ KB\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>cars</th>\n",
              "      <th>bluecar counter</th>\n",
              "      <th>utilib counter</th>\n",
              "      <th>utilib 1.4 counter</th>\n",
              "      <th>charge slots</th>\n",
              "      <th>charging status</th>\n",
              "      <th>city</th>\n",
              "      <th>id</th>\n",
              "      <th>kind</th>\n",
              "      <th>postal code</th>\n",
              "      <th>public name</th>\n",
              "      <th>rental status</th>\n",
              "      <th>slots</th>\n",
              "      <th>station type</th>\n",
              "      <th>status</th>\n",
              "      <th>year</th>\n",
              "      <th>month</th>\n",
              "      <th>day</th>\n",
              "      <th>hour</th>\n",
              "      <th>minute</th>\n",
              "      <th>time</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>nonexistent</td>\n",
              "      <td>Paris</td>\n",
              "      <td>paris-suffren-2</td>\n",
              "      <td>STATION</td>\n",
              "      <td>75015</td>\n",
              "      <td>Paris/Suffren/2</td>\n",
              "      <td>operational</td>\n",
              "      <td>2</td>\n",
              "      <td>station</td>\n",
              "      <td>ok</td>\n",
              "      <td>2018</td>\n",
              "      <td>4</td>\n",
              "      <td>8</td>\n",
              "      <td>11</td>\n",
              "      <td>43</td>\n",
              "      <td>2018-04-08 11:43:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>6</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>operational</td>\n",
              "      <td>Paris</td>\n",
              "      <td>paris-raymondlosserand-145</td>\n",
              "      <td>STATION</td>\n",
              "      <td>75014</td>\n",
              "      <td>Paris/Raymond Losserand/145</td>\n",
              "      <td>operational</td>\n",
              "      <td>0</td>\n",
              "      <td>station</td>\n",
              "      <td>ok</td>\n",
              "      <td>2018</td>\n",
              "      <td>4</td>\n",
              "      <td>6</td>\n",
              "      <td>7</td>\n",
              "      <td>24</td>\n",
              "      <td>2018-04-06 07:24:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>operational</td>\n",
              "      <td>Le Bourget</td>\n",
              "      <td>lebourget-johnfitzgeraldkennedy-2</td>\n",
              "      <td>STATION</td>\n",
              "      <td>93350</td>\n",
              "      <td>Le Bourget/John Fitzgerald Kennedy/2</td>\n",
              "      <td>operational</td>\n",
              "      <td>1</td>\n",
              "      <td>station</td>\n",
              "      <td>ok</td>\n",
              "      <td>2018</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>20</td>\n",
              "      <td>14</td>\n",
              "      <td>2018-04-03 20:14:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>operational</td>\n",
              "      <td>Paris</td>\n",
              "      <td>paris-eugeneoudine-51</td>\n",
              "      <td>STATION</td>\n",
              "      <td>75013</td>\n",
              "      <td>Paris/EugÃ¨ne OudinÃ©/51</td>\n",
              "      <td>operational</td>\n",
              "      <td>2</td>\n",
              "      <td>station</td>\n",
              "      <td>ok</td>\n",
              "      <td>2018</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>37</td>\n",
              "      <td>2018-04-04 04:37:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>nonexistent</td>\n",
              "      <td>Paris</td>\n",
              "      <td>paris-portedechamperret-6</td>\n",
              "      <td>PARKING</td>\n",
              "      <td>75017</td>\n",
              "      <td>Paris/Porte de Champerret/6</td>\n",
              "      <td>operational</td>\n",
              "      <td>3</td>\n",
              "      <td>station</td>\n",
              "      <td>ok</td>\n",
              "      <td>2018</td>\n",
              "      <td>4</td>\n",
              "      <td>8</td>\n",
              "      <td>17</td>\n",
              "      <td>23</td>\n",
              "      <td>2018-04-08 17:23:00</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   cars  bluecar counter  utilib counter  ...  hour  minute                time\n",
              "0     0                0               0  ...    11      43 2018-04-08 11:43:00\n",
              "1     6                6               0  ...     7      24 2018-04-06 07:24:00\n",
              "2     3                3               0  ...    20      14 2018-04-03 20:14:00\n",
              "3     3                3               1  ...     4      37 2018-04-04 04:37:00\n",
              "4     3                3               0  ...    17      23 2018-04-08 17:23:00\n",
              "\n",
              "[5 rows x 21 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 78
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "C8TipITCpUvc",
        "colab_type": "text"
      },
      "source": [
        "## 3)Checking the Completeness of the Dataset"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pMrB0exVpZMU",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "82be985e-4804-4c1f-a538-ee09950217dd"
      },
      "source": [
        "# Checking for missing values\n",
        "# The code below confirms that there are no missing values in the \n",
        "# cleaned dataset thus far\n",
        "\n",
        "np.count_nonzero(df1.isnull())"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 79
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Pr6JgcGxqctZ",
        "colab_type": "text"
      },
      "source": [
        "## 4) Checking the Consistency in Dataset"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ilKqhF-Xqi2c",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "cd193f8d-7893-4bf3-c423-751cac555a2a"
      },
      "source": [
        "# Checking for any duplicate values\n",
        "\n",
        "# Confirm the number of rows and columns \n",
        "# from the code below\n",
        "df1.shape\n",
        "\n",
        "# Confirm the number of rows and columns\n",
        "# after dropping duplicates\n",
        "\n",
        "df2 = df1.drop_duplicates()\n",
        "df2.shape\n",
        "\n",
        "# The two blocks of code above have the same number of\n",
        "# rows and columns confirming that there are no duplicates in the dataset"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(5000, 21)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 80
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "72tFf4j_rVH3",
        "colab_type": "text"
      },
      "source": [
        "## 5) Checking Dataset Accuracy"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "uiBYtkKxrb9B",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 103
        },
        "outputId": "243d481d-f708-4c9e-ba40-f856732a31f1"
      },
      "source": [
        "# According to the dataset description, the 'cars' attribute\n",
        "# and 'bluecar counter' attribute should have the exact same values\n",
        "# we can confirm the accuracy of this statement from the comment below\n",
        "\n",
        "df1[(df1['cars']) != (df1['bluecar counter'])]\n",
        "\n",
        "# The above code returns an empty result set which verifies that\n",
        "# the two columns mentioned contain similar values\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>cars</th>\n",
              "      <th>bluecar counter</th>\n",
              "      <th>utilib counter</th>\n",
              "      <th>utilib 1.4 counter</th>\n",
              "      <th>charge slots</th>\n",
              "      <th>charging status</th>\n",
              "      <th>city</th>\n",
              "      <th>id</th>\n",
              "      <th>kind</th>\n",
              "      <th>postal code</th>\n",
              "      <th>public name</th>\n",
              "      <th>rental status</th>\n",
              "      <th>slots</th>\n",
              "      <th>station type</th>\n",
              "      <th>status</th>\n",
              "      <th>year</th>\n",
              "      <th>month</th>\n",
              "      <th>day</th>\n",
              "      <th>hour</th>\n",
              "      <th>minute</th>\n",
              "      <th>time</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "Empty DataFrame\n",
              "Columns: [cars, bluecar counter, utilib counter, utilib 1.4 counter, charge slots, charging status, city, id, kind, postal code, public name, rental status, slots, station type, status, year, month, day, hour, minute, time]\n",
              "Index: []"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 81
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VACW1j9XHh1g",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 103
        },
        "outputId": "694dee13-b2ad-4569-97e0-d60450fb8130"
      },
      "source": [
        "# We can also check the accuracy of the hour attribute\n",
        "# In reality we should have a range of 0 to 24 in the hour column so anything\n",
        "# lower or higher than that is inaccurate\n",
        "\n",
        "df1[(df1['hour']) > (24)]\n",
        "df1[(df1['hour']) < (0)]\n",
        "\n",
        "#Similarly, we can check the accuracy of the minute column\n",
        "df1[(df1['minute']) > (60)]\n",
        "df1[(df1['minute']) < (0)]\n",
        "\n",
        "# All the above codes return an empty result set meaning the data is accurate for those attributes"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>cars</th>\n",
              "      <th>bluecar counter</th>\n",
              "      <th>utilib counter</th>\n",
              "      <th>utilib 1.4 counter</th>\n",
              "      <th>charge slots</th>\n",
              "      <th>charging status</th>\n",
              "      <th>city</th>\n",
              "      <th>id</th>\n",
              "      <th>kind</th>\n",
              "      <th>postal code</th>\n",
              "      <th>public name</th>\n",
              "      <th>rental status</th>\n",
              "      <th>slots</th>\n",
              "      <th>station type</th>\n",
              "      <th>status</th>\n",
              "      <th>year</th>\n",
              "      <th>month</th>\n",
              "      <th>day</th>\n",
              "      <th>hour</th>\n",
              "      <th>minute</th>\n",
              "      <th>time</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "Empty DataFrame\n",
              "Columns: [cars, bluecar counter, utilib counter, utilib 1.4 counter, charge slots, charging status, city, id, kind, postal code, public name, rental status, slots, station type, status, year, month, day, hour, minute, time]\n",
              "Index: []"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 82
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xya1Do6BtaCO",
        "colab_type": "text"
      },
      "source": [
        "# Exporting the Cleaned Dataset as CSV"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "O9HXO-KItdCQ",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 425
        },
        "outputId": "5faed3c6-095a-4478-cec1-fd7fc3a6f884"
      },
      "source": [
        "# Finally we can drop the year, month, date\n",
        "# and minute columns before exporting the final dataframe\n",
        "\n",
        "df_final = df1.drop(columns=['year', 'month', 'day', 'minute'])\n",
        "df_final.head(5)\n",
        "df_final.shape\n",
        "df_final.info()\n",
        "\n",
        "# We can save the cleaned dataset as a csv\n",
        "# within this notebook\n",
        "\n",
        "df_final.to_csv('Autolib.csv')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 5000 entries, 0 to 4999\n",
            "Data columns (total 17 columns):\n",
            " #   Column              Non-Null Count  Dtype         \n",
            "---  ------              --------------  -----         \n",
            " 0   cars                5000 non-null   int64         \n",
            " 1   bluecar counter     5000 non-null   int64         \n",
            " 2   utilib counter      5000 non-null   int64         \n",
            " 3   utilib 1.4 counter  5000 non-null   int64         \n",
            " 4   charge slots        5000 non-null   int64         \n",
            " 5   charging status     5000 non-null   object        \n",
            " 6   city                5000 non-null   object        \n",
            " 7   id                  5000 non-null   object        \n",
            " 8   kind                5000 non-null   object        \n",
            " 9   postal code         5000 non-null   int64         \n",
            " 10  public name         5000 non-null   object        \n",
            " 11  rental status       5000 non-null   object        \n",
            " 12  slots               5000 non-null   int64         \n",
            " 13  station type        5000 non-null   object        \n",
            " 14  status              5000 non-null   object        \n",
            " 15  hour                5000 non-null   int64         \n",
            " 16  time                5000 non-null   datetime64[ns]\n",
            "dtypes: datetime64[ns](1), int64(8), object(8)\n",
            "memory usage: 664.2+ KB\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cyiH-9WETLxz",
        "colab_type": "text"
      },
      "source": [
        "# Data Analysis"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bqI6gF4CTa_G",
        "colab_type": "text"
      },
      "source": [
        "I am going to use SQL to analyze the dataset and respond to the reserch questions"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tliTojXxTnQs",
        "colab_type": "text"
      },
      "source": [
        "## Connecting to SQLite Database, Loading and Previewing Data"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ayTjAJuQTvwI",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 505
        },
        "outputId": "d456d6e9-c42b-40e3-c1a0-6710e05365c5"
      },
      "source": [
        "# First load the sql extension into our environment\n",
        "#\n",
        "%load_ext sql\n",
        "\n",
        "# Then connect to the in memory sqlite database\n",
        "\n",
        "%sql sqlite://\n",
        "\n",
        "# Loading the cleaned table from the data cleaning section\n",
        "# \n",
        "#\n",
        "with open('Autolib.csv','r') as f:\n",
        "    Autolib = pd.read_csv(f, index_col=0, encoding='utf-8')\n",
        "%sql DROP TABLE if EXISTS Autolib;\n",
        "%sql PERSIST Autolib;\n",
        "%sql SELECT * FROM Autolib LIMIT 5;"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "The sql extension is already loaded. To reload it, use:\n",
            "  %reload_ext sql\n",
            " * sqlite://\n",
            "Done.\n",
            " * sqlite://\n",
            " * sqlite://\n",
            "Done.\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<table>\n",
              "    <tr>\n",
              "        <th>index</th>\n",
              "        <th>cars</th>\n",
              "        <th>bluecar counter</th>\n",
              "        <th>utilib counter</th>\n",
              "        <th>utilib 1.4 counter</th>\n",
              "        <th>charge slots</th>\n",
              "        <th>charging status</th>\n",
              "        <th>city</th>\n",
              "        <th>id</th>\n",
              "        <th>kind</th>\n",
              "        <th>postal code</th>\n",
              "        <th>public name</th>\n",
              "        <th>rental status</th>\n",
              "        <th>slots</th>\n",
              "        <th>station type</th>\n",
              "        <th>status</th>\n",
              "        <th>hour</th>\n",
              "        <th>time</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "        <td>0</td>\n",
              "        <td>0</td>\n",
              "        <td>0</td>\n",
              "        <td>0</td>\n",
              "        <td>0</td>\n",
              "        <td>0</td>\n",
              "        <td>nonexistent</td>\n",
              "        <td>Paris</td>\n",
              "        <td>paris-suffren-2</td>\n",
              "        <td>STATION</td>\n",
              "        <td>75015</td>\n",
              "        <td>Paris/Suffren/2</td>\n",
              "        <td>operational</td>\n",
              "        <td>2</td>\n",
              "        <td>station</td>\n",
              "        <td>ok</td>\n",
              "        <td>11</td>\n",
              "        <td>2018-04-08 11:43:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "        <td>1</td>\n",
              "        <td>6</td>\n",
              "        <td>6</td>\n",
              "        <td>0</td>\n",
              "        <td>0</td>\n",
              "        <td>0</td>\n",
              "        <td>operational</td>\n",
              "        <td>Paris</td>\n",
              "        <td>paris-raymondlosserand-145</td>\n",
              "        <td>STATION</td>\n",
              "        <td>75014</td>\n",
              "        <td>Paris/Raymond Losserand/145</td>\n",
              "        <td>operational</td>\n",
              "        <td>0</td>\n",
              "        <td>station</td>\n",
              "        <td>ok</td>\n",
              "        <td>7</td>\n",
              "        <td>2018-04-06 07:24:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "        <td>2</td>\n",
              "        <td>3</td>\n",
              "        <td>3</td>\n",
              "        <td>0</td>\n",
              "        <td>2</td>\n",
              "        <td>0</td>\n",
              "        <td>operational</td>\n",
              "        <td>Le Bourget</td>\n",
              "        <td>lebourget-johnfitzgeraldkennedy-2</td>\n",
              "        <td>STATION</td>\n",
              "        <td>93350</td>\n",
              "        <td>Le Bourget/John Fitzgerald Kennedy/2</td>\n",
              "        <td>operational</td>\n",
              "        <td>1</td>\n",
              "        <td>station</td>\n",
              "        <td>ok</td>\n",
              "        <td>20</td>\n",
              "        <td>2018-04-03 20:14:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "        <td>3</td>\n",
              "        <td>3</td>\n",
              "        <td>3</td>\n",
              "        <td>1</td>\n",
              "        <td>0</td>\n",
              "        <td>1</td>\n",
              "        <td>operational</td>\n",
              "        <td>Paris</td>\n",
              "        <td>paris-eugeneoudine-51</td>\n",
              "        <td>STATION</td>\n",
              "        <td>75013</td>\n",
              "        <td>Paris/EugÃ¨ne OudinÃ©/51</td>\n",
              "        <td>operational</td>\n",
              "        <td>2</td>\n",
              "        <td>station</td>\n",
              "        <td>ok</td>\n",
              "        <td>4</td>\n",
              "        <td>2018-04-04 04:37:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "        <td>4</td>\n",
              "        <td>3</td>\n",
              "        <td>3</td>\n",
              "        <td>0</td>\n",
              "        <td>0</td>\n",
              "        <td>0</td>\n",
              "        <td>nonexistent</td>\n",
              "        <td>Paris</td>\n",
              "        <td>paris-portedechamperret-6</td>\n",
              "        <td>PARKING</td>\n",
              "        <td>75017</td>\n",
              "        <td>Paris/Porte de Champerret/6</td>\n",
              "        <td>operational</td>\n",
              "        <td>3</td>\n",
              "        <td>station</td>\n",
              "        <td>ok</td>\n",
              "        <td>17</td>\n",
              "        <td>2018-04-08 17:23:00</td>\n",
              "    </tr>\n",
              "</table>"
            ],
            "text/plain": [
              "[(0, 0, 0, 0, 0, 0, 'nonexistent', 'Paris', 'paris-suffren-2', 'STATION', 75015, 'Paris/Suffren/2', 'operational', 2, 'station', 'ok', 11, '2018-04-08 11:43:00'),\n",
              " (1, 6, 6, 0, 0, 0, 'operational', 'Paris', 'paris-raymondlosserand-145', 'STATION', 75014, 'Paris/Raymond Losserand/145', 'operational', 0, 'station', 'ok', 7, '2018-04-06 07:24:00'),\n",
              " (2, 3, 3, 0, 2, 0, 'operational', 'Le Bourget', 'lebourget-johnfitzgeraldkennedy-2', 'STATION', 93350, 'Le Bourget/John Fitzgerald Kennedy/2', 'operational', 1, 'station', 'ok', 20, '2018-04-03 20:14:00'),\n",
              " (3, 3, 3, 1, 0, 1, 'operational', 'Paris', 'paris-eugeneoudine-51', 'STATION', 75013, 'Paris/EugÃ¨ne OudinÃ©/51', 'operational', 2, 'station', 'ok', 4, '2018-04-04 04:37:00'),\n",
              " (4, 3, 3, 0, 0, 0, 'nonexistent', 'Paris', 'paris-portedechamperret-6', 'PARKING', 75017, 'Paris/Porte de Champerret/6', 'operational', 3, 'station', 'ok', 17, '2018-04-08 17:23:00')]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 84
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TmRb8cZjVjpG",
        "colab_type": "text"
      },
      "source": [
        "## Summary of Dataset"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XmtB8LhlVw-p",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 452
        },
        "outputId": "e5b9813f-b28a-495a-ae6b-a49b3b5c6198"
      },
      "source": [
        "# Getting to know more about the dataset by accessing its information\n",
        "%%sql\n",
        "pragma table_info('Autolib')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            " * sqlite://\n",
            "Done.\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<table>\n",
              "    <tr>\n",
              "        <th>cid</th>\n",
              "        <th>name</th>\n",
              "        <th>type</th>\n",
              "        <th>notnull</th>\n",
              "        <th>dflt_value</th>\n",
              "        <th>pk</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "        <td>0</td>\n",
              "        <td>index</td>\n",
              "        <td>BIGINT</td>\n",
              "        <td>0</td>\n",
              "        <td>None</td>\n",
              "        <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "        <td>1</td>\n",
              "        <td>cars</td>\n",
              "        <td>BIGINT</td>\n",
              "        <td>0</td>\n",
              "        <td>None</td>\n",
              "        <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "        <td>2</td>\n",
              "        <td>bluecar counter</td>\n",
              "        <td>BIGINT</td>\n",
              "        <td>0</td>\n",
              "        <td>None</td>\n",
              "        <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "        <td>3</td>\n",
              "        <td>utilib counter</td>\n",
              "        <td>BIGINT</td>\n",
              "        <td>0</td>\n",
              "        <td>None</td>\n",
              "        <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "        <td>4</td>\n",
              "        <td>utilib 1.4 counter</td>\n",
              "        <td>BIGINT</td>\n",
              "        <td>0</td>\n",
              "        <td>None</td>\n",
              "        <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "        <td>5</td>\n",
              "        <td>charge slots</td>\n",
              "        <td>BIGINT</td>\n",
              "        <td>0</td>\n",
              "        <td>None</td>\n",
              "        <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "        <td>6</td>\n",
              "        <td>charging status</td>\n",
              "        <td>TEXT</td>\n",
              "        <td>0</td>\n",
              "        <td>None</td>\n",
              "        <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "        <td>7</td>\n",
              "        <td>city</td>\n",
              "        <td>TEXT</td>\n",
              "        <td>0</td>\n",
              "        <td>None</td>\n",
              "        <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "        <td>8</td>\n",
              "        <td>id</td>\n",
              "        <td>TEXT</td>\n",
              "        <td>0</td>\n",
              "        <td>None</td>\n",
              "        <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "        <td>9</td>\n",
              "        <td>kind</td>\n",
              "        <td>TEXT</td>\n",
              "        <td>0</td>\n",
              "        <td>None</td>\n",
              "        <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "        <td>10</td>\n",
              "        <td>postal code</td>\n",
              "        <td>BIGINT</td>\n",
              "        <td>0</td>\n",
              "        <td>None</td>\n",
              "        <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "        <td>11</td>\n",
              "        <td>public name</td>\n",
              "        <td>TEXT</td>\n",
              "        <td>0</td>\n",
              "        <td>None</td>\n",
              "        <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "        <td>12</td>\n",
              "        <td>rental status</td>\n",
              "        <td>TEXT</td>\n",
              "        <td>0</td>\n",
              "        <td>None</td>\n",
              "        <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "        <td>13</td>\n",
              "        <td>slots</td>\n",
              "        <td>BIGINT</td>\n",
              "        <td>0</td>\n",
              "        <td>None</td>\n",
              "        <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "        <td>14</td>\n",
              "        <td>station type</td>\n",
              "        <td>TEXT</td>\n",
              "        <td>0</td>\n",
              "        <td>None</td>\n",
              "        <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "        <td>15</td>\n",
              "        <td>status</td>\n",
              "        <td>TEXT</td>\n",
              "        <td>0</td>\n",
              "        <td>None</td>\n",
              "        <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "        <td>16</td>\n",
              "        <td>hour</td>\n",
              "        <td>BIGINT</td>\n",
              "        <td>0</td>\n",
              "        <td>None</td>\n",
              "        <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "        <td>17</td>\n",
              "        <td>time</td>\n",
              "        <td>TEXT</td>\n",
              "        <td>0</td>\n",
              "        <td>None</td>\n",
              "        <td>0</td>\n",
              "    </tr>\n",
              "</table>"
            ],
            "text/plain": [
              "[(0, 'index', 'BIGINT', 0, None, 0),\n",
              " (1, 'cars', 'BIGINT', 0, None, 0),\n",
              " (2, 'bluecar counter', 'BIGINT', 0, None, 0),\n",
              " (3, 'utilib counter', 'BIGINT', 0, None, 0),\n",
              " (4, 'utilib 1.4 counter', 'BIGINT', 0, None, 0),\n",
              " (5, 'charge slots', 'BIGINT', 0, None, 0),\n",
              " (6, 'charging status', 'TEXT', 0, None, 0),\n",
              " (7, 'city', 'TEXT', 0, None, 0),\n",
              " (8, 'id', 'TEXT', 0, None, 0),\n",
              " (9, 'kind', 'TEXT', 0, None, 0),\n",
              " (10, 'postal code', 'BIGINT', 0, None, 0),\n",
              " (11, 'public name', 'TEXT', 0, None, 0),\n",
              " (12, 'rental status', 'TEXT', 0, None, 0),\n",
              " (13, 'slots', 'BIGINT', 0, None, 0),\n",
              " (14, 'station type', 'TEXT', 0, None, 0),\n",
              " (15, 'status', 'TEXT', 0, None, 0),\n",
              " (16, 'hour', 'BIGINT', 0, None, 0),\n",
              " (17, 'time', 'TEXT', 0, None, 0)]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 85
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "BJrE_Q5jH0MF",
        "colab_type": "text"
      },
      "source": [
        "## 1) Most popular hour for picking up a shared electric car (bluecar) in Paris during April 2018"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zCLLmPyuWFjO",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 95
        },
        "outputId": "f280265f-b073-490e-81ec-b04c966d8816"
      },
      "source": [
        "# To respond to this research question, I combined Common Table Expressions (CTEs) and Joins as well calculations \n",
        "# and aggregate functions. For each unique station, we need to order the time\n",
        "# in ascending order then check the number of blue cars as the time progresses.\n",
        "# If the number of cars goes up from one time to the next immediate then a car or several cars have been returned \n",
        "# during that hour. If the number of cars reduced, then a car or several cars must have been picked up.\n",
        "# If the number stayed the same then nothing happened between the two recorded times\n",
        "\n",
        "# The first CTE TempResult1 is showing the change in the number of cars between two times for each station in Paris\n",
        "# then identifying the instance where there was a reduction meaning that some cars were picked up\n",
        "# The second CTE TempResult2 is adding the number of cars picked up and grouping them by hour to display desired result\n",
        "\n",
        "%%sql\n",
        "with RECURSIVE TempResult2\n",
        "as\n",
        "\n",
        "(with RECURSIVE TempResult\n",
        "as\n",
        "(SELECT A.\"bluecar counter\", A.\"public name\", A.time, A.hour, (A.\"bluecar counter\" - B.\"bluecar counter\") AS difference\n",
        "FROM Autolib as A \n",
        "LEFT OUTER JOIN Autolib B ON B.\"public name\" = A.\"public name\"\n",
        "AND B.time = (SELECT MAX(time) FROM Autolib C WHERE C.time < A.time AND C.\"public name\"= A.\"public name\")\n",
        "WHERE A.city = 'Paris')\n",
        "\n",
        "SELECT *\n",
        "FROM TempResult \n",
        "WHERE difference < 0\n",
        "ORDER BY \"public name\" ASC, time ASC)\n",
        "\n",
        "SELECT hour, ABS(SUM(difference)) as \"Number of Bluecars Picked Up\"\n",
        "FROM TempResult2\n",
        "GROUP BY hour\n",
        "ORDER BY \"Number of Bluecars Picked Up\" DESC\n",
        "LIMIT 1\n",
        "\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            " * sqlite://\n",
            "Done.\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<table>\n",
              "    <tr>\n",
              "        <th>hour</th>\n",
              "        <th>Number of Bluecars Picked Up</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "        <td>21</td>\n",
              "        <td>109</td>\n",
              "    </tr>\n",
              "</table>"
            ],
            "text/plain": [
              "[(21, 109)]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 96
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "N5hf8SmkOErj",
        "colab_type": "text"
      },
      "source": [
        "## 2) Most popular hour for returning cars in Paris during April 2018"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "nqgGdkQAOHxu",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 95
        },
        "outputId": "51e5e24d-1a19-42c6-e388-c61fca4b179c"
      },
      "source": [
        "# We can use the exact same code from the previous question above\n",
        "# since it is the exact same logic but now have a positive change in the number of cars\n",
        "# between different times as opposed to negative or 0\n",
        "%%sql\n",
        "with RECURSIVE TempResult2\n",
        "as\n",
        "\n",
        "(with RECURSIVE TempResult\n",
        "as\n",
        "(SELECT A.\"bluecar counter\", A.\"public name\", A.time, A.hour, (A.\"bluecar counter\" - B.\"bluecar counter\") AS difference\n",
        "FROM Autolib as A \n",
        "LEFT OUTER JOIN Autolib B ON B.\"public name\" = A.\"public name\"\n",
        "AND B.time = (SELECT MAX(time) FROM Autolib C WHERE C.time < A.time AND C.\"public name\"= A.\"public name\")\n",
        "WHERE A.city = 'Paris')\n",
        "\n",
        "SELECT *\n",
        "FROM TempResult \n",
        "WHERE difference > 0\n",
        "ORDER BY \"public name\" ASC, time ASC)\n",
        "\n",
        "SELECT hour, SUM(difference) as \"Number of Bluecars Picked Up\"\n",
        "FROM TempResult2\n",
        "GROUP BY hour\n",
        "ORDER BY \"Number of Bluecars Picked Up\" DESC\n",
        "LIMIT 1"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            " * sqlite://\n",
            "Done.\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<table>\n",
              "    <tr>\n",
              "        <th>hour</th>\n",
              "        <th>Number of Bluecars Picked Up</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "        <td>12</td>\n",
              "        <td>104</td>\n",
              "    </tr>\n",
              "</table>"
            ],
            "text/plain": [
              "[(12, 104)]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 97
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "K0a_BG3lRego",
        "colab_type": "text"
      },
      "source": [
        "## 3) Most popular station in Paris overall in regards to picking up blue cars"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "idGu1no2RxDr",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 95
        },
        "outputId": "0f7a5313-cb2d-44ce-86d0-9948a3104358"
      },
      "source": [
        "# Again, we can use the code in the first question\n",
        "# but instead of grouping the result set by hour\n",
        "# we can group it by station name\n",
        "%%sql\n",
        "with RECURSIVE TempResult2\n",
        "as\n",
        "\n",
        "(with RECURSIVE TempResult\n",
        "as\n",
        "(SELECT A.\"bluecar counter\", A.\"public name\", A.\"postal code\", A.time, A.hour, (A.\"bluecar counter\" - B.\"bluecar counter\") AS difference\n",
        "FROM Autolib as A \n",
        "LEFT OUTER JOIN Autolib B ON B.\"public name\" = A.\"public name\"\n",
        "AND B.time = (SELECT MAX(time) FROM Autolib C WHERE C.time < A.time AND C.\"public name\"= A.\"public name\")\n",
        "WHERE A.city = 'Paris')\n",
        "\n",
        "SELECT *\n",
        "FROM TempResult \n",
        "WHERE difference < 0\n",
        "ORDER BY \"public name\" ASC, time ASC)\n",
        "\n",
        "SELECT \"public name\", \"postal code\", ABS(SUM(difference)) as \"Number of Bluecars Picked Up\"\n",
        "FROM TempResult2\n",
        "GROUP BY \"public name\"\n",
        "ORDER BY \"Number of Bluecars Picked Up\" DESC\n",
        "LIMIT 1"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            " * sqlite://\n",
            "Done.\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<table>\n",
              "    <tr>\n",
              "        <th>public name</th>\n",
              "        <th>postal code</th>\n",
              "        <th>Number of Bluecars Picked Up</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "        <td>Paris/Porte de Montrouge/8</td>\n",
              "        <td>75014</td>\n",
              "        <td>19</td>\n",
              "    </tr>\n",
              "</table>"
            ],
            "text/plain": [
              "[('Paris/Porte de Montrouge/8', 75014, 19)]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 98
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tSJUY9uzSQBw",
        "colab_type": "text"
      },
      "source": [
        "## 4) Most popular station in Paris during the most popular picking hour"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Lc2Q5zbFSbcN",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 116
        },
        "outputId": "a7e30036-8cae-4ad4-e3d0-ffe02682087c"
      },
      "source": [
        "# Here we can group the result set by sation name\n",
        "# and filter the result set to only output data where the hour\n",
        "# equals the most popular picking hour i.e. hour = 21\n",
        "%%sql\n",
        "with RECURSIVE TempResult2\n",
        "as\n",
        "\n",
        "(with RECURSIVE TempResult\n",
        "as\n",
        "(SELECT A.\"bluecar counter\", A.\"public name\", A.\"postal code\", A.time, A.hour, (A.\"bluecar counter\" - B.\"bluecar counter\") AS difference\n",
        "FROM Autolib as A \n",
        "LEFT OUTER JOIN Autolib B ON B.\"public name\" = A.\"public name\"\n",
        "AND B.time = (SELECT MAX(time) FROM Autolib C WHERE C.time < A.time AND C.\"public name\"= A.\"public name\")\n",
        "WHERE A.city = 'Paris')\n",
        "\n",
        "SELECT *\n",
        "FROM TempResult \n",
        "WHERE difference < 0\n",
        "ORDER BY \"public name\" ASC, time ASC)\n",
        "\n",
        "SELECT \"public name\", \"postal code\", ABS(SUM(difference)) as \"Number of Bluecars Picked Up\"\n",
        "FROM TempResult2\n",
        "WHERE hour = 21\n",
        "GROUP BY \"public name\"\n",
        "ORDER BY \"Number of Bluecars Picked Up\" DESC\n",
        "LIMIT 2"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            " * sqlite://\n",
            "Done.\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<table>\n",
              "    <tr>\n",
              "        <th>public name</th>\n",
              "        <th>postal code</th>\n",
              "        <th>Number of Bluecars Picked Up</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "        <td>Paris/HÃ´pital/47</td>\n",
              "        <td>75013</td>\n",
              "        <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "        <td>Paris/Tronchet/19</td>\n",
              "        <td>75008</td>\n",
              "        <td>6</td>\n",
              "    </tr>\n",
              "</table>"
            ],
            "text/plain": [
              "[('Paris/HÃ´pital/47', 75013, 6), ('Paris/Tronchet/19', 75008, 6)]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 89
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nVsuUqUKT_g1",
        "colab_type": "text"
      },
      "source": [
        "## 5) Most popular postal code in Paris overall when it comes to picking up blue cars"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-8mNg55sUTQ6",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 95
        },
        "outputId": "d034e9bb-4425-4e1b-8b02-1a874ee71f0d"
      },
      "source": [
        "# Use previous code as well then Group result set by postal code\n",
        "# and order the difference column in descending order\n",
        "%%sql\n",
        "with RECURSIVE TempResult2\n",
        "as\n",
        "\n",
        "(with RECURSIVE TempResult\n",
        "as\n",
        "(SELECT A.\"bluecar counter\", A.\"public name\", A.\"postal code\", A.time, A.hour, (A.\"bluecar counter\" - B.\"bluecar counter\") AS difference\n",
        "FROM Autolib as A \n",
        "LEFT OUTER JOIN Autolib B ON B.\"public name\" = A.\"public name\"\n",
        "AND B.time = (SELECT MAX(time) FROM Autolib C WHERE C.time < A.time AND C.\"public name\"= A.\"public name\")\n",
        "WHERE A.city = 'Paris')\n",
        "\n",
        "SELECT *\n",
        "FROM TempResult \n",
        "WHERE difference < 0\n",
        "ORDER BY \"postal code\" ASC, time ASC)\n",
        "\n",
        "SELECT \"postal code\", ABS(SUM(difference)) as \"Number of Bluecars Picked Up\"\n",
        "FROM TempResult2\n",
        "GROUP BY \"postal code\"\n",
        "ORDER BY \"Number of Bluecars Picked Up\" DESC\n",
        "LIMIT 1"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            " * sqlite://\n",
            "Done.\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<table>\n",
              "    <tr>\n",
              "        <th>postal code</th>\n",
              "        <th>Number of Bluecars Picked Up</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "        <td>75015</td>\n",
              "        <td>175</td>\n",
              "    </tr>\n",
              "</table>"
            ],
            "text/plain": [
              "[(75015, 175)]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 90
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bXiAEQccVzaZ",
        "colab_type": "text"
      },
      "source": [
        "## 6) Most popular postal code in Paris during the most popular hour when it comes to picking up blue cars"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cf6kb_f3V-AT",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 95
        },
        "outputId": "92a6c81a-bfc9-43b4-ff46-1aefc937765c"
      },
      "source": [
        "# Filter previous result to use only records where the hour\n",
        "# is equal to 21 i.e. the most popular picking up hour\n",
        "%%sql\n",
        "with RECURSIVE TempResult2\n",
        "as\n",
        "\n",
        "(with RECURSIVE TempResult\n",
        "as\n",
        "(SELECT A.\"bluecar counter\", A.\"public name\", A.\"postal code\", A.time, A.hour, (A.\"bluecar counter\" - B.\"bluecar counter\") AS difference\n",
        "FROM Autolib as A \n",
        "LEFT OUTER JOIN Autolib B ON B.\"public name\" = A.\"public name\"\n",
        "AND B.time = (SELECT MAX(time) FROM Autolib C WHERE C.time < A.time AND C.\"public name\"= A.\"public name\")\n",
        "WHERE A.city = 'Paris')\n",
        "\n",
        "SELECT *\n",
        "FROM TempResult \n",
        "WHERE difference < 0\n",
        "ORDER BY \"postal code\" ASC, time ASC)\n",
        "\n",
        "SELECT \"postal code\", ABS(SUM(difference)) as \"Number of Bluecars Picked\"\n",
        "FROM TempResult2\n",
        "WHERE hour = 21\n",
        "GROUP BY \"postal code\"\n",
        "ORDER BY \"Number of Bluecars Picked\" DESC\n",
        "LIMIT 1"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            " * sqlite://\n",
            "Done.\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<table>\n",
              "    <tr>\n",
              "        <th>postal code</th>\n",
              "        <th>Number of Bluecars Picked</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "        <td>75013</td>\n",
              "        <td>17</td>\n",
              "    </tr>\n",
              "</table>"
            ],
            "text/plain": [
              "[(75013, 17)]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 91
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "EjacxPYJXo_S",
        "colab_type": "text"
      },
      "source": [
        "## 7) Most popular hour for picking up a Utilib car in Paris"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hNenMZ_bXwS-",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 95
        },
        "outputId": "ce6cd6e0-4b77-4929-d469-b9be832e8632"
      },
      "source": [
        "# Again, using similar logic and code\n",
        "# but now substituting blue car with utilib car\n",
        "%%sql\n",
        "with RECURSIVE TempResult2\n",
        "as\n",
        "\n",
        "(with RECURSIVE TempResult\n",
        "as\n",
        "(SELECT A.\"utilib counter\", A.\"public name\", A.time, A.hour, (A.\"utilib counter\" - B.\"utilib counter\") AS difference\n",
        "FROM Autolib as A \n",
        "LEFT OUTER JOIN Autolib B ON B.\"public name\" = A.\"public name\"\n",
        "AND B.time = (SELECT MAX(time) FROM Autolib C WHERE C.time < A.time AND C.\"public name\"= A.\"public name\")\n",
        "WHERE A.city = 'Paris')\n",
        "\n",
        "SELECT *\n",
        "FROM TempResult \n",
        "WHERE difference < 0\n",
        "ORDER BY \"public name\" ASC, time ASC)\n",
        "\n",
        "SELECT hour, ABS(SUM(difference)) as \"Number of Utilibs Picked Up\"\n",
        "FROM TempResult2\n",
        "GROUP BY hour\n",
        "ORDER BY \"Number of Utilibs Picked Up\" DESC\n",
        "LIMIT 1;\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            " * sqlite://\n",
            "Done.\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<table>\n",
              "    <tr>\n",
              "        <th>hour</th>\n",
              "        <th>Number of Utilibs Picked Up</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "        <td>10</td>\n",
              "        <td>8</td>\n",
              "    </tr>\n",
              "</table>"
            ],
            "text/plain": [
              "[(10, 8)]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 92
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cm_PoBv9YTjx",
        "colab_type": "text"
      },
      "source": [
        "## 8) Most popular hour for picking up a Utilib 1.4 car in Paris"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WxT-Fwu8ZjQm",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 95
        },
        "outputId": "61556046-a81f-4f6c-c886-e09c5a6bb83d"
      },
      "source": [
        "# Again, using similar logic and code\n",
        "# but now substituting blue car with utilib 1.4 car\n",
        "%%sql\n",
        "with RECURSIVE TempResult2\n",
        "as\n",
        "\n",
        "(with RECURSIVE TempResult\n",
        "as\n",
        "(SELECT A.\"utilib 1.4 counter\", A.\"public name\", A.time, A.hour, (A.\"utilib 1.4 counter\" - B.\"utilib 1.4 counter\") AS difference\n",
        "FROM Autolib as A \n",
        "LEFT OUTER JOIN Autolib B ON B.\"public name\" = A.\"public name\"\n",
        "AND B.time = (SELECT MAX(time) FROM Autolib C WHERE C.time < A.time AND C.\"public name\"= A.\"public name\")\n",
        "WHERE A.city = 'Paris')\n",
        "\n",
        "SELECT *\n",
        "FROM TempResult \n",
        "WHERE difference < 0\n",
        "ORDER BY \"public name\" ASC, time ASC)\n",
        "\n",
        "SELECT hour, ABS(SUM(difference)) as \"Number of Utilibs 1.4 Picked Up\"\n",
        "FROM TempResult2\n",
        "GROUP BY hour\n",
        "ORDER BY \"Number of Utilibs 1.4 Picked Up\" DESC\n",
        "LIMIT 1"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            " * sqlite://\n",
            "Done.\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<table>\n",
              "    <tr>\n",
              "        <th>hour</th>\n",
              "        <th>Number of Utilibs 1.4 Picked Up</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "        <td>11</td>\n",
              "        <td>16</td>\n",
              "    </tr>\n",
              "</table>"
            ],
            "text/plain": [
              "[(11, 16)]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 99
        }
      ]
    }
  ]
}
